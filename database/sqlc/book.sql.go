// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: book.sql

package database

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    title, author_id
) VALUES(
    $1,$2
) RETURNING id, title, author_id, created_at, updated_at
`

type CreateBookParams struct {
	Title    string        `json:"title"`
	AuthorID sql.NullInt32 `json:"author_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.AuthorID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE id=$1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, title, author_id, created_at, updated_at FROM books ORDER BY id LIMIT $1 OFFSET $2
`

type GetAllBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBooks(ctx context.Context, arg GetAllBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBook = `-- name: GetBook :one
SELECT id, title, author_id, created_at, updated_at FROM books WHERE id=$1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books 
SET title = $2, author_id = $3, updated_at=now()
WHERE id = $1
`

type UpdateBookParams struct {
	ID       int32         `json:"id"`
	Title    string        `json:"title"`
	AuthorID sql.NullInt32 `json:"author_id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.ID, arg.Title, arg.AuthorID)
	return err
}
